{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Kantan",
    "scopeName": "source.kan",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#builtin-types"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#chars"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#literals"
        },
        {
            "include": "#keywords"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.kantan",
                    "begin": "(\\/\\/)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.comment.kantan"
                        }
                    },
                    "end": "(?:\\n|$)"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.kantan",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.kantan",
                    "match": "\\\\."
                }
            ]
        },
        "chars": {
            "name": "string.quoted.single.kantan",
            "begin": "'",
            "end": "'|(?<!\\\\)(?=\\s*\\n)",
            "patterns": [
                {
                    "name": "constant.character.escape.kantan",
                    "match": "\\\\."
                }
            ]
        },
        "numbers": {
            "match": "\\b((\\d+\\.?\\d+)|(\\d+))\\b",
            "name": "constant.numeric.integer.kantan"
        },
        "literals": {
            "match": "\\b(true|false|null|undefined)\\b",
            "name": "constant.language.kantan"
        },
        "builtin-types": {
            "match": "\\b(i8|i16|i32|i64|isize|u8|u16|u32|u64|usize|f32|f64|string|char|bool|void)\\b",
            "name": "entity.name.type.kantan"
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.operator.new",
                    "match": "\\bnew\\b"
                },
                {
                    "name": "keyword.operator.delete",
                    "match": "\\bdelete\\b"
                },
                {
                    "name": "keyword.operator.let",
                    "match": "\\blet\\b"
                },
                {
                    "name": "keyword.operator.import",
                    "match": "\\bimport\\b"
                },
                {
                    "name": "keyword.operator.sizeof",
                    "match": "\\bsizeof\\b"
                },
                {
                    "name": "keyword.operator.as",
                    "match": "\\bas\\b"
                },
                {
                    "name": "keyword.control.return",
                    "match": "\\breturn\\b"
                },
                {
                    "name": "keyword.control.defer",
                    "match": "\\bdefer\\b"
                },
                {
                    "name": "keyword.control.break",
                    "match": "\\bbreak\\b"
                },
                {
                    "name": "keyword.control.continue",
                    "match": "\\bcontinue\\b"
                },
                {
                    "name": "keyword.control.if",
                    "match": "\\bif\\b"
                },
                {
                    "name": "keyword.control.else",
                    "match": "\\belse\\b"
                },
                {
                    "name": "keyword.control.while",
                    "match": "\\bwhile\\b"
                },
                {
                    "name": "keyword.control.for",
                    "match": "\\bfor\\b"
                },
                {
                    "name": "keyword.control.def",
                    "match": "\\bdef\\b"
                },
                {
                    "name": "keyword.other.export",
                    "match": "\\bexport\\b"
                },
                {
                    "name": "keyword.other.extern",
                    "match": "\\bextern\\b"
                },
                {
                    "name": "keyword.other.type",
                    "match": "\\btype\\b"
                },
                {
                    "name": "keyword.other.struct",
                    "match": "\\bstruct\\b"
                },
                {
                    "name": "keyword.other.union",
                    "match": "\\bunion\\b"
                },
                {
                    "name": "keyword.other.enum",
                    "match": "\\benum\\b"
                },
                {
                    "name": "keyword.other.delegate",
                    "match": "\\bdelegate\\b"
                }
            ]
        }
    }
}